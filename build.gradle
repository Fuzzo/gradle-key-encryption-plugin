/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/custom_plugins.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'maven-publish'
	//id 'gradle-key-encryption-plugin' version '0.1'
	/*
    <groupId>net.fuzzo</groupId>
    <artifactId>gradle-key-encryption-plugin</artifactId>
    */
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

/*
dependencies {
	implementation 'dev.gradleplugins:gradle-api:7.6'
}
*/

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }

        // Create a new test suite
        functionalTest(JvmTestSuite) {
            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project()
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) } 
                }
            }
        }
    }
}

gradlePlugin {
    // Define the plugin
    plugins {
        keyencryption {
            id = 'gradle-key-encryption-plugin'
            implementationClass = 'net.fuzzo.gradle.plugin.keyencryption.KeyEncryptionPlugin'
            displayName = 'gradle-key-encryption-plugin'
            description = 'Gradle plugin to encrypt and decrypt text using a secrey key stored in a Java keystore'
            tags.set(['encryption'])
        }
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.functionalTest)
}
